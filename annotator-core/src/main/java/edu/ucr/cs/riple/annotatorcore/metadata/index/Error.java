/*
 * MIT License
 *
 * Copyright (c) 2020 Nima Karimipour
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package edu.ucr.cs.riple.annotatorcore.metadata.index;

import edu.ucr.cs.riple.annotatorcore.Config;
import edu.ucr.cs.riple.annotatorcore.metadata.trackers.Region;
import edu.ucr.cs.riple.injector.location.Location;
import java.util.Objects;
import javax.annotation.Nullable;

/** Represents an error reported by NullAway. */
@SuppressWarnings("JavaLangClash")
public class Error extends Enclosed {

  /** Error Type. */
  public final String messageType;
  /** Error message. */
  public final String message;
  /**
   * If non-null, this error involved a pseudo-assignment of a @Nullable expression into a @NonNull
   * target, and this field is the Symbol for that target.
   */
  @Nullable public final Location nonnullTarget;

  public Error(
      String messageType, String message, Region region, @Nullable Location nonnullTargetLocation) {
    super(region);
    this.messageType = messageType;
    this.message = message;
    this.nonnullTarget = nonnullTargetLocation;
  }

  /**
   * Returns a factory that can create instances of Error object based on the given values. These
   * values correspond to a row in a TSV file generated by NullAway.
   *
   * @param config Config instance.
   * @return Factory instance.
   */
  public static Factory<Error> factory(Config config) {
    return config.getAdapter()::deserializeError;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Error)) {
      return false;
    }
    Error error = (Error) o;
    return messageType.equals(error.messageType)
        && message.equals(error.message)
        // Since nonnullTarget is @Nullable, used Objects.equal.
        && Objects.equals(nonnullTarget, error.nonnullTarget);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageType, message, nonnullTarget);
  }

  @Override
  public String toString() {
    return "Type='" + messageType + '\'' + ", message='" + message + '\'';
  }
}
