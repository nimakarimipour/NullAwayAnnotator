/*
 * MIT License
 *
 * Copyright (c) 2022 Nima Karimipour
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


plugins {
    id 'java'
    id("net.ltgt.errorprone") version "2.0.1"
}

group 'org.example'
version '1.0-SNAPSHOT'

def libraryloader = project.getProperty("library-model-loader-path")

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compileOnly project(":Target")

    annotationProcessor "com.uber.nullaway:nullaway:" + System.getenv('NULLAWAY_TEST_VERSION')
    annotationProcessor "edu.ucr.cs.riple.annotator:annotator-scanner:" + System.getenv('ANNOTATOR_VERSION')
    annotationProcessor files(libraryloader)

    compileOnly "org.jspecify:jspecify:0.3.0"

    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    errorprone "com.google.errorprone:error_prone_core:2.3.2"
    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
}

test {
    useJUnitPlatform()
}

import net.ltgt.gradle.errorprone.CheckSeverity
tasks.withType(JavaCompile) {
    // remove the if condition if you want to run NullAway on test code
    if (!name.toLowerCase().contains("test")) {
        options.errorprone.disableAllChecks = true
        options.errorprone.disableAllWarnings = true
        options.errorprone {
            check("NullAway", CheckSeverity.WARN)
            check("AnnotatorScanner", CheckSeverity.ERROR)
            option("NullAway:AnnotatedPackages", "test")
            option("NullAway:SerializeFixMetadata", "true")
            option("NullAway:AcknowledgeLibraryModelsOfAnnotatedCode", "true")
            option("NullAway:FixSerializationConfigPath", project.getProperty("DepB-nullaway-config-path"))
            option("AnnotatorScanner:ConfigPath", project.getProperty("DepB-scanner-config-path"))
        }
    }
    options.compilerArgs << "-Xmaxerrs" << "100000"
    options.compilerArgs << "-Xmaxwarns" << "100000"
}
